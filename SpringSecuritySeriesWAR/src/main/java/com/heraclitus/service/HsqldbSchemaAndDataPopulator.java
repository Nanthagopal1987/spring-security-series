package com.heraclitus.service;

import javax.sql.DataSource;

import org.springframework.beans.factory.InitializingBean;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.acls.MutableAcl;
import org.springframework.security.acls.MutableAclService;
import org.springframework.security.acls.Permission;
import org.springframework.security.acls.domain.AclImpl;
import org.springframework.security.acls.objectidentity.ObjectIdentity;
import org.springframework.security.acls.objectidentity.ObjectIdentityImpl;
import org.springframework.security.acls.sid.PrincipalSid;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;
import org.springframework.util.Assert;

/**
 * I am responsible for populating the configured datasource
 */
public class HsqldbSchemaAndDataPopulator implements InitializingBean {
    
    private MutableAclService mutableAclService;
    private JdbcTemplate template;
    private TransactionTemplate tt;
    
    /**
     *
     */
    public void afterPropertiesSet() throws Exception {
        // Assert.notNull(mutableAclService, "mutableAclService required");
        // Assert.notNull(tt, "platformTransactionManager required");
        Assert.notNull(template, "dataSource required");
        
        // create schema to allow Spring Security ACL approach.
        template
                .execute("CREATE TABLE ACL_SID("
                        + "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL PRIMARY KEY,"
                        + "PRINCIPAL BOOLEAN NOT NULL,"
                        + "SID VARCHAR_IGNORECASE(100) NOT NULL,"
                        + "CONSTRAINT UNIQUE_UK_1 UNIQUE(SID,PRINCIPAL));");
        
        template
                .execute("CREATE TABLE ACL_CLASS("
                        + "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL PRIMARY KEY,"
                        + "CLASS VARCHAR_IGNORECASE(100) NOT NULL,"
                        + "CONSTRAINT UNIQUE_UK_2 UNIQUE(CLASS));");
        
        template
                .execute("CREATE TABLE ACL_OBJECT_IDENTITY("
                        + "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL PRIMARY KEY,"
                        + "OBJECT_ID_CLASS BIGINT NOT NULL,"
                        + "OBJECT_ID_IDENTITY BIGINT NOT NULL,"
                        + "PARENT_OBJECT BIGINT,"
                        + "OWNER_SID BIGINT,"
                        + "ENTRIES_INHERITING BOOLEAN NOT NULL,"
                        + "CONSTRAINT UNIQUE_UK_3 UNIQUE(OBJECT_ID_CLASS,OBJECT_ID_IDENTITY),"
                        + "CONSTRAINT FOREIGN_FK_1 FOREIGN KEY(PARENT_OBJECT)REFERENCES ACL_OBJECT_IDENTITY(ID),"
                        + "CONSTRAINT FOREIGN_FK_2 FOREIGN KEY(OBJECT_ID_CLASS)REFERENCES ACL_CLASS(ID),"
                        + "CONSTRAINT FOREIGN_FK_3 FOREIGN KEY(OWNER_SID)REFERENCES ACL_SID(ID));");
        
        template
                .execute("CREATE TABLE ACL_ENTRY("
                        + "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL PRIMARY KEY,"
                        + "ACL_OBJECT_IDENTITY BIGINT NOT NULL,"
                        + "ACE_ORDER INT NOT NULL,"
                        + "SID BIGINT NOT NULL,"
                        + "MASK INTEGER NOT NULL,"
                        + "GRANTING BOOLEAN NOT NULL,"
                        + "AUDIT_SUCCESS BOOLEAN NOT NULL,"
                        + "AUDIT_FAILURE BOOLEAN NOT NULL,"
                        + "CONSTRAINT UNIQUE_UK_4 UNIQUE(ACL_OBJECT_IDENTITY,ACE_ORDER),"
                        + "CONSTRAINT FOREIGN_FK_4 FOREIGN KEY(ACL_OBJECT_IDENTITY) REFERENCES ACL_OBJECT_IDENTITY(ID),"
                        + "CONSTRAINT FOREIGN_FK_5 FOREIGN KEY(SID) REFERENCES ACL_SID(ID));");
        
        // add tables to represent admin core-domain instances.
        template
                .execute("CREATE TABLE USERS(USERNAME VARCHAR_IGNORECASE(50) NOT NULL PRIMARY KEY,"
                        + "PASSWORD VARCHAR_IGNORECASE(50) NOT NULL,"
                        + "ENABLED BOOLEAN NOT NULL);");
        template
                .execute("CREATE TABLE AUTHORITIES(USERNAME VARCHAR_IGNORECASE(50) NOT NULL,AUTHORITY VARCHAR_IGNORECASE(50) NOT NULL,CONSTRAINT FK_AUTHORITIES_USERS FOREIGN KEY(USERNAME) REFERENCES USERS(USERNAME));");
        template
                .execute("CREATE UNIQUE INDEX IX_AUTH_USERNAME ON AUTHORITIES(USERNAME,AUTHORITY);");
        
        // add tables to represent bug tracking domain instances.
        // TODO - add project start and end date
        template
                .execute("CREATE TABLE PROJECTS(ID BIGINT NOT NULL PRIMARY KEY, NAME VARCHAR_IGNORECASE(50) NOT NULL, DESCRIPTION VARCHAR_IGNORECASE(200) NOT NULL);");
        
        // insert data here
        template
                .execute("INSERT INTO USERS VALUES('disabled','disabled',FALSE);");
        template.execute("INSERT INTO USERS VALUES('admin','admin',TRUE);");
        template
                .execute("INSERT INTO USERS VALUES('username','password',TRUE);");
        template.execute("INSERT INTO USERS VALUES('test','test',TRUE);");
        
        template
                .execute("INSERT INTO AUTHORITIES VALUES('admin','ROLE_USER');");
        template
                .execute("INSERT INTO AUTHORITIES VALUES('admin','ROLE_ADMIN');");
        
        template
                .execute("INSERT INTO AUTHORITIES VALUES('username','ROLE_USER');");
        
        template.execute("INSERT INTO AUTHORITIES VALUES('test','ROLE_USER');");
        
        template
                .execute("INSERT INTO projects VALUES (1, 'Test Project', 'A description not longer than 200 chars of what project is.');");
        template
                .execute("INSERT INTO projects VALUES (2, 'Test Project 2', 'Smaller description of project here.');");
        
        // // Set a user account that will initially own all the created data
        // final Authentication authRequest = new
        // UsernamePasswordAuthenticationToken(
        // "admin", "admin",
        // new GrantedAuthority[] { new GrantedAuthorityImpl(
        // "ROLE_IGNORED") });
        // SecurityContextHolder.getContext().setAuthentication(authRequest);
        //        
        // // Now for the ACL stuff
        // createObjectIdentityEntryFor(ProjectImpl.class, Long.valueOf(1));
        // createObjectIdentityEntryFor(ProjectImpl.class, Long.valueOf(2));
        //        
        // grantPermissions(ProjectImpl.class, Long.valueOf(1), "admin",
        // BasePermission.ADMINISTRATION);
        // grantPermissions(ProjectImpl.class, Long.valueOf(1), "username",
        // BasePermission.READ);
        //        
        // grantPermissions(ProjectImpl.class, Long.valueOf(2), "admin",
        // BasePermission.ADMINISTRATION);
        // grantPermissions(ProjectImpl.class, Long.valueOf(2), "username",
        // BasePermission.READ);
        //        
        // SecurityContextHolder.clearContext();
    }
    
    public void setDataSource(final DataSource dataSource) {
        this.template = new JdbcTemplate(dataSource);
    }
    
    public void setMutableAclService(final MutableAclService mutableAclService) {
        this.mutableAclService = mutableAclService;
    }
    
    public void setPlatformTransactionManager(
            final PlatformTransactionManager platformTransactionManager) {
        this.tt = new TransactionTemplate(platformTransactionManager);
    }
    
    /*
     * Create acl_object_identity rows (and also acl_class rows as needed)
     */
    private void createObjectIdentityEntryFor(final Class<?> c,
            final Long entityId) {
        final ObjectIdentity objectIdentity = new ObjectIdentityImpl(c,
                entityId);
        tt.execute(new TransactionCallback() {
            public Object doInTransaction(final TransactionStatus arg0) {
                mutableAclService.createAcl(objectIdentity);
                
                return null;
            }
        });
    }
    
    private void grantPermissions(final Class<?> entityType,
            final Long entityId, final String recipientUsername,
            final Permission permission) {
        final AclImpl acl = (AclImpl) mutableAclService
                .readAclById(new ObjectIdentityImpl(entityType, entityId));
        acl.insertAce(acl.getEntries().length, permission, new PrincipalSid(
                recipientUsername), true);
        updateAclInTransaction(acl);
    }
    
    private void updateAclInTransaction(final MutableAcl acl) {
        tt.execute(new TransactionCallback() {
            public Object doInTransaction(final TransactionStatus arg0) {
                mutableAclService.updateAcl(acl);
                
                return null;
            }
        });
    }
}